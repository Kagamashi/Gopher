// package main

import "fmt"

/* METHODS
Go supports methods defined on struct types


*/

type rect struct {
    width, height int
}

func (r *rect) area() int {  // this area method has a receiver type of *rect
    return r.width * r.height
}

func (r rect) perim() int {  // methods can be defined for either pointer or value receiver types
    return 2*r.width + 2*r.height
}

func main() {
    r := rect{width: 10, height: 5}

    fmt.Println("area: ", r.area())  // here we call the 2 methods defined for our struct
    // area: 50 
		
		fmt.Println("perim:", r.perim())
		// perim: 30

    rp := &r  // Go automatically handles conversion between values and pointers for method calls
    fmt.Println("area: ", rp.area())
		// area: 50

    fmt.Println("perim:", rp.perim())
		// perim: 30

	}
